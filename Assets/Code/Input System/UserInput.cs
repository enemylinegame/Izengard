//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Code/Input System/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""3da3b365-324e-4fcc-b289-8a08e9107b5e"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""e1628d9a-be0b-4fed-b664-f14b6078129a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""de0c7083-0866-4375-856f-8e2c4164e8a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a5671e6e-1c05-4adf-9fb1-1366ce8b6cf1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3863105c-218f-4c23-bcfc-8dd00f06c832"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard;Mouse + keyboard"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63d4b6c3-039f-41d3-bf21-6fc9a63020b6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard;Mouse + keyboard"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PointerParameters"",
            ""id"": ""d3032e71-f0d8-4331-9500-f353c12f388b"",
            ""actions"": [
                {
                    ""name"": ""PointerID"",
                    ""type"": ""Value"",
                    ""id"": ""cab3c58a-95d8-412f-9bc8-47e68ed42817"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7fed934a-5f15-45a6-bd84-ac71dd341493"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98285b7e-0b67-4d9b-9f21-9b7ff01c04e7"",
                    ""path"": ""<Mouse>/pointerId"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""PointerID"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bde7d2d-3e45-4156-8570-c4588edc5697"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse + keyboard"",
            ""bindingGroup"": ""Mouse + keyboard"",
            ""devices"": []
        }
    ]
}");
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_LeftClick = m_PlayerControl.FindAction("LeftClick", throwIfNotFound: true);
        m_PlayerControl_RightClick = m_PlayerControl.FindAction("RightClick", throwIfNotFound: true);
        m_PlayerControl_Move = m_PlayerControl.FindAction("Move", throwIfNotFound: true);
        // PointerParameters
        m_PointerParameters = asset.FindActionMap("PointerParameters", throwIfNotFound: true);
        m_PointerParameters_PointerID = m_PointerParameters.FindAction("PointerID", throwIfNotFound: true);
        m_PointerParameters_PointerPosition = m_PointerParameters.FindAction("PointerPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private IPlayerControlActions m_PlayerControlActionsCallbackInterface;
    private readonly InputAction m_PlayerControl_LeftClick;
    private readonly InputAction m_PlayerControl_RightClick;
    private readonly InputAction m_PlayerControl_Move;
    public struct PlayerControlActions
    {
        private @UserInput m_Wrapper;
        public PlayerControlActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_PlayerControl_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_PlayerControl_RightClick;
        public InputAction @Move => m_Wrapper.m_PlayerControl_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnRightClick;
                @Move.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PlayerControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);

    // PointerParameters
    private readonly InputActionMap m_PointerParameters;
    private IPointerParametersActions m_PointerParametersActionsCallbackInterface;
    private readonly InputAction m_PointerParameters_PointerID;
    private readonly InputAction m_PointerParameters_PointerPosition;
    public struct PointerParametersActions
    {
        private @UserInput m_Wrapper;
        public PointerParametersActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerID => m_Wrapper.m_PointerParameters_PointerID;
        public InputAction @PointerPosition => m_Wrapper.m_PointerParameters_PointerPosition;
        public InputActionMap Get() { return m_Wrapper.m_PointerParameters; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PointerParametersActions set) { return set.Get(); }
        public void SetCallbacks(IPointerParametersActions instance)
        {
            if (m_Wrapper.m_PointerParametersActionsCallbackInterface != null)
            {
                @PointerID.started -= m_Wrapper.m_PointerParametersActionsCallbackInterface.OnPointerID;
                @PointerID.performed -= m_Wrapper.m_PointerParametersActionsCallbackInterface.OnPointerID;
                @PointerID.canceled -= m_Wrapper.m_PointerParametersActionsCallbackInterface.OnPointerID;
                @PointerPosition.started -= m_Wrapper.m_PointerParametersActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_PointerParametersActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_PointerParametersActionsCallbackInterface.OnPointerPosition;
            }
            m_Wrapper.m_PointerParametersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PointerID.started += instance.OnPointerID;
                @PointerID.performed += instance.OnPointerID;
                @PointerID.canceled += instance.OnPointerID;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }
        }
    }
    public PointerParametersActions @PointerParameters => new PointerParametersActions(this);
    private int m_MousekeyboardSchemeIndex = -1;
    public InputControlScheme MousekeyboardScheme
    {
        get
        {
            if (m_MousekeyboardSchemeIndex == -1) m_MousekeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse + keyboard");
            return asset.controlSchemes[m_MousekeyboardSchemeIndex];
        }
    }
    public interface IPlayerControlActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPointerParametersActions
    {
        void OnPointerID(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
    }
}
